$date
	Mon Jan 27 21:27:58 2014
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module dut $end
$scope module test $end
$var wire 1 ! cout $end
$var wire 4 " z [3:0] $end
$var reg 1 # cin $end
$var reg 4 $ x [3:0] $end
$var reg 4 % y [3:0] $end
$scope module a0 $end
$var wire 4 & carry_in [3:0] $end
$var wire 4 ' carry_out [3:0] $end
$var wire 1 ( cin $end
$var wire 1 ! cout $end
$var wire 4 ) x [3:0] $end
$var wire 4 * y [3:0] $end
$var wire 4 + z [3:0] $end
$scope module full_Adder[0] $end
$var wire 1 , a $end
$var wire 1 - b $end
$var wire 1 . cin $end
$var wire 1 / cout $end
$var wire 1 0 sum $end
$upscope $end
$scope module full_Adder[1] $end
$var wire 1 1 a $end
$var wire 1 2 b $end
$var wire 1 3 cin $end
$var wire 1 4 cout $end
$var wire 1 5 sum $end
$upscope $end
$scope module full_Adder[2] $end
$var wire 1 6 a $end
$var wire 1 7 b $end
$var wire 1 8 cin $end
$var wire 1 9 cout $end
$var wire 1 : sum $end
$upscope $end
$scope module full_Adder[3] $end
$var wire 1 ; a $end
$var wire 1 < b $end
$var wire 1 = cin $end
$var wire 1 > cout $end
$var wire 1 ? sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x?
0>
0=
0<
x;
x:
09
08
07
x6
x5
04
03
02
x1
00
0/
0.
0-
0,
bz +
b0 *
bx0 )
0(
b0 '
b0 &
b0 %
b0 $
0#
bz "
0!
$end
#10
x!
x>
x=
x9
x8
x4
x3
bx0 &
x/
bx '
x0
1-
x,
b1 %
b1 *
b101 $
bx )
#20
1.
0-
12
17
1<
1#
bx1 &
1(
b1110 %
b1110 *
#30
0!
0>
0=
09
08
04
03
0/
b0 '
0.
02
07
0<
0#
b0 &
0(
b0 %
b0 *
b0 $
#40
