#!/bin/sh

ARCH=x86_64
if test "x${NRNHOME}" = x ; then
	prefix=/usr/local/nrn
	exec_prefix=/usr/local/nrn/x86_64
	bindir=${exec_prefix}/bin
	libdir=${exec_prefix}/lib
else
        prefix="$NRNHOME"
	exec_prefix="${prefix}/${ARCH}"
	bindir="${prefix}/${ARCH}/bin"
	libdir="${prefix}/${ARCH}/lib"
fi

if test "${NRNHOME_EXEC}" != "" ; then
	exec_prefix="${NRNHOME_EXEC}"
	bindir="${exec_prefix}/bin"
	libdir="${exec_prefix}/lib"
fi

export prefix
export exec_prefix
export bindir
export libdir

LIBOBJDIR="${libdir}"
MAKEFILEDIR="${bindir}"


PURIFY="USEPURIFY=no"
if [ "$1" = "-p" ] ; then
	PURIFY="USEPURIFY=yes"
	shift
fi

TRACE="BGTRACE_LIBS="
if [ "$1" = "-trace" ] ; then
	TRACE="BGTRACE_LIBS = -L/bgl/hpct_bgl/mp_profiler/lib -lmpitrace.rts -L/bgl/hpct_bgl/binutils-2.14/lib -lbfd -liberty -lhandle_MPID_Win_start_error.rts"
	shift
fi

UserINCFLAGS=""
if [ "$1" = "-incflags" ] ; then
      UserINCFLAGS="$2"
      shift
      shift
fi

UserLDFLAGS=""
if [ "$1" = "-loadflags" ] ; then
       UserLDFLAGS="$2"
       shift 
       shift
fi

if [ ! -d $ARCH ] ; then
	echo "Creating $ARCH directory for .o files."
	echo
	mkdir $ARCH
fi

pwd
files=""
incs=""
if test $# -gt 0 ; then
	for i in $* ; do
		if test -d $i ; then
			files="$files `echo $i/*.mod`"
			incs="$incs `echo $i/*.inc`"
		else
			files="$files $i"
		fi
	done
else
	files=`echo *.mod`
fi

mfiles=""
for i in $files ; do
	mfiles="$mfiles `basename $i`"
done
echo $files
echo $mfiles

files=`echo "$files" | sed 's/\.mod//g'`

if test "$files" = '*' ; then
	files=""
fi

cd $ARCH
mdir=`pwd`
for i in $files; do
    rm -f "`basename $i`".mod
    ln -s ../$i.mod .
done
if test "$incs" != "" ; then
	for i in $incs ; do
	    rm -f "`basename $i`"
	    ln -s ../$i .
	done
fi

bfiles=`echo "$mfiles" | sed 's/\.mod//g'`

for i in $cfiles; do
    rm -f $i
    ln -s ../$i .
done

COBJS=
MODOBJS=
if [ `echo "\n"` ] ; then
	newline="\n"
else
	newline="\\\\n"
fi

echo '#include <stdio.h>
#include "hocdec.h"
extern int nrnmpi_myid;
extern int nrn_nobanner_;
modl_reg(){
  if (!nrn_nobanner_) if (nrnmpi_myid < 1) {
    fprintf(stderr, "Additional mechanisms from files'$newline'");
' > mod_func.c

if true ; then # the standard order
for i in $files
	do
		echo '    fprintf(stderr," '$i'.mod");' >>mod_func.c
	done
else
	# use "ls -x" to sort alphabetically by lines
	# use "ls -C" to sort alphabetically by columns
	ls -C $mfiles | sed 's/\(.*\)/    fprintf(stderr,"\1\\n");/' >> mod_func.c
fi
echo '    fprintf(stderr, "'$newline'");
  }' >>mod_func.c

for i in $bfiles
do
	echo '  _'$i'_reg();' >> mod_func.c
	MODOBJS="$MODOBJS $i.o"
done
echo "}" >> mod_func.c


if test -n "$cfiles" ; then
	COBJS=`echo "$cfiles" | sed 's/\.c/.o/g'`
fi

#make -f "${MAKEFILEDIR}/nrniv_makefile" "$PURIFY" "$TRACE" "MODOBJFILES=$MODOBJS" "COBJFILES=$COBJS" "UserLDFLAGS=$UserLDFLAGS" "UserINCFLAGS=$UserINCFLAGS" special &&
#  echo "Successfully created $ARCH/special"

MODLO=`echo "$MODOBJS" | sed 's/\.o/.lo/g'`
CLO=`echo "$COBJS" | sed 's/\.o/.lo/g'`
if test "${mdir}" = "${prefix}/share/nrn/demo/release/powerpc" ; then
  mdir='${NRNHOME}'/share/nrn/demo/release/${ARCH}
fi
make -f "$MAKEFILEDIR/nrnmech_makefile" "MODOBJFILES=$MODLO" "COBJFILES=$CLO" "UserLDFLAGS=$UserLDFLAGS" "UserINCFLAGS=$UserINCFLAGS" libnrnmech.la &&
  echo '#!/bin/sh
if test "x${NRNHOME}" = "x" ; then
	NRNHOME='"\"${prefix}\""'
fi'> special &&
  echo 'if test "x${NRNBIN}" = "x" ; then
	NRNBIN='"\"${bindir}/\""'
fi'>> special &&
echo 'if test "" = "yes" ; then
	NRNIV="${NRNBIN}nrniv.app/Contents/MacOS/nrniv"
else
	NRNIV="${NRNBIN}nrniv"
fi' >> special &&
  echo '"${NRNIV}"'" -dll \"${mdir}/.libs/libnrnmech.so\" \"\$@\"" >> special &&
  chmod 755 special &&
  echo "Successfully created $ARCH/special"

#if false ; then
if false ; then
#if false ; then
vv=`sw_vers -productVersion|sed 's/.*\.\(.*\)\..*/\1/'`
if test $vv -gt 6 ; then
echo "use @executable_path prefix for install_name for dylib absolute paths"
ff="${mdir}/.libs/libnrnmech.so"
f=`otool -L "$ff" | sed -n "s,.*$libdir/\(.*dylib\).*,\
-change $libdir/\1 @executable_path/../lib/\1,p"`
install_name_tool $f "$ff"
fi
fi
