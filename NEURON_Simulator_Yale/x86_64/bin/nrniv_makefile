#
# This makefile has the rules necessary for making the custom version of nrniv
# called "special" from various mod files.  The variable "MODOBJFILES" should
# be set on the command line to list the .o files that are needed.
#
prefix = /usr/local/nrn
exec_prefix = /usr/local/nrn/x86_64

bindir = ${exec_prefix}/bin
sbindir = ${exec_prefix}/sbin
libexecdir = ${exec_prefix}/libexec
datadir = ${prefix}/share
sysconfdir = ${prefix}/etc
sharedstatedir = ${prefix}/com
localstatedir = ${prefix}/var
libdir = ${exec_prefix}/lib
infodir = ${prefix}/share/info
mandir = ${prefix}/share/man
includedir = ${prefix}/include

pkgdatadir = $(datadir)/nrn
pkglibdir = $(libdir)/nrn
pkgincludedir = $(includedir)/nrn
libobjdir = $(libdir)

DEFS = -DHAVE_CONFIG_H
LDFLAGS = $(UserLDFLAGS) 
LIBS = $(BGTRACE_LIBS)  -lm -ldl
X_CFLAGS = 
X_LIBS =  -lX11
X_EXTRA_LIBS = 
X_PRE_LIBS =  -lSM -lICE
IV_LIBS = /usr/local/iv/x86_64/lib/libIVhines.la $(X_PRE_LIBS) $(X_LIBS) $(X_EXTRA_LIBS)
IVOS_LIB = 
PVM_LIBS =  
NJ_LIBS = 
PY_LIBS = 
NRNNI_LIBS = 

PTHREAD_CC=gcc
PTHREAD_CFLAGS=-pthread
PTHREAD_LIBS=

INCLUDES = -I. -I.. -I$(pkgincludedir) -I$(libdir) $(UserINCFLAGS)

LIBTOOL = $(pkgdatadir)/libtool --tag=CC
CC = gcc
CXX = g++
CFLAGS = -g -O2 $(PTHREAD_CFLAGS)
CXXFLAGS = -g -O2 $(PTHREAD_CFLAGS)
COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CCLD = $(CC)
CXXLD = $(CXX)

CXXLINK = $(LIBTOOL) --mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(LDFLAGS)
#CXXPURELINK = $(LIBTOOL) --tag=purify --mode=link purify $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(LDFLAGS)
LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS)

lnrnmpi =
#lnrnmpi = -lnrnmpi

NRNLIBS = -L$(libdir) -lnrnoc -loc \
	-lnrniv -livoc -loc \
	-lneuron_gnu -lscopmath -lsparse13 -lsundials $(lnrnmpi) \
	-lmemacs -lmeschach \
	$(IVOS_LIB) $(IV_LIBS) \
	-lreadline -lncurses \
	$(NJ_LIBS) $(PY_LIBS) $(NRNNI_LIBS) $(PVM_LIBS) $(PTHREAD_LIBS)

NRNOCOBJS = $(libobjdir)/ocmain.o $(libobjdir)/nrnnoiv.o $(libobjdir)/ocnoiv.o
NRNIVOBJS = $(libobjdir)/nrnmain.o $(libobjdir)/ivocmain.o $(libobjdir)/nvkludge.o

.SUFFIXES:
.SUFFIXES: .c .mod .o
#
# How to make a .o file from a .mod file.  Note that we have to delete the
# .c file, or else make will get confused.  We have to go directly from
# a .mod to a .o file because otherwise GNU make will try to use a rule
# involving m2c.  Argh!!  Why did they have to build in so many implicit
# rules?
# 
#.mod.o:
#	$(bindir)/nocmodl $* || (rm -f $*.c; exit 1)
#	$(COMPILE) -c $*.c
#	rm -f $*.c
#
# some experimentation gave promising results for the following.
# it remains to be seen how portable it is. It seems to work
# for gnu make and the /usr/ccs/bin/make distributed with solaris.

#%.o : %.mod

.mod.c:
	$(bindir)/nocmodl $*
	
.c.o:
	$(COMPILE) -c $*.c

.mod.o:
	$(bindir)/nocmodl $*
	$(COMPILE) -c $*.c


mod_func.o: mod_func.c
	$(COMPILE) -c $<

special: $(MODOBJFILES) $(COBJFILES) mod_func.o
	$(CXXLINK) -o special $(NRNIVOBJS) $(MODOBJFILES) mod_func.o $(COBJFILES) $(NRNLIBS) $(LIBS)

#special: $(MODOBJFILES) $(COBJFILES) mod_func.o
#	if test "$(USEPURIFY)" = "yes" ; then \
#	$(CXXPURELINK) -o special $(NRNIVOBJS) $(MODOBJFILES) mod_func.o $(COBJFILES) $(NRNLIBS) $(LIBS) ;\
#	echo "if there is an error perhaps you need '/opt/Rational/config/start_lmgrd_on_NeuronDev'"; \
#	echo 'if you cannot run then perhaps you need a LD_LIBRARY_PATH as in:'; \
#	echo 'export LD_LIBRARY_PATH=/home/hines/pcache/home/hines/neuron/iv/i686/lib:/home/hines/pcache/home/hines/neuron/purify/i686/lib:/home/hines/neuron/iv/i686/lib:/home/hines/neuron/purify/i686/lib:/usr/X11R6/lib:/usr/X11R6/lib/modules'; \
#	else \
#	$(CXXLINK) -o special $(NRNIVOBJS) $(MODOBJFILES) mod_func.o $(COBJFILES) $(NRNLIBS) $(LIBS) ;\
#	fi
